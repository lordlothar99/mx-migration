// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package migration.actions;

import static com.mendix.core.Core.getMicroflowNames;
import static java.util.stream.Collectors.toList;
import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import migration.proxies.ScriptId;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class JAVA_ListScripts extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private java.lang.String module;
	private java.lang.String microflowPrefix;

	public JAVA_ListScripts(IContext context, java.lang.String module, java.lang.String microflowPrefix)
	{
		super(context);
		this.module = module;
		this.microflowPrefix = microflowPrefix;
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		// BEGIN USER CODE
		return getMicroflowNames().stream()
			.filter(m -> matches(m))
			.sorted()
			.map(m -> toScriptId(m))
			.map(s -> s.getMendixObject())
			.collect(toList());
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JAVA_ListScripts";
	}

	// BEGIN EXTRA CODE
	private ILogNode logger = Core.getLogger("Migration");
	private boolean matches(String microflowName) {
		int dot = microflowName.indexOf(".");
		boolean matches = true;
		
		if (this.module != null && !"".equals(this.module.trim())) {
			String _module = microflowName.substring(0, dot);
			matches &= this.module.equals(_module);
			logger.debug("Microflow \"" + microflowName + "\" found. Module match = " + matches);
		}

		if (matches && this.microflowPrefix != null && !"".equals(this.microflowPrefix.trim())) {
			matches &= microflowName.startsWith(this.microflowPrefix, dot + 1);
			logger.debug("Microflow \"" + microflowName + "\" found. Name match = " + matches);
		}
		
		return matches;
	}
	
	private ScriptId toScriptId(String microflowName) {
		ScriptId scriptId = new ScriptId(getContext());
		scriptId.setName(microflowName);
		return scriptId;
	}
	// END EXTRA CODE
}
